<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Disease Prediction</title>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
</head>
<body>
  <h1>Disease Prediction</h1>
  <div>
    <label for="feature1">Feature 1:</label>
    <input type="text" id="feature1" />
  </div>
  <div>
    <label for="feature2">Feature 2:</label>
    <input type="text" id="feature2" />
  </div>
  <!-- Add more input fields for other features -->
  <button onclick="predict()">Predict</button>
  <div id="prediction"></div>

  <script>
    async function predict() {
      const features = {
        feature1: parseFloat($('#feature1').val()),
        feature2: parseFloat($('#feature2').val()),
        // Add more features here
      };

      const response = await fetch('http://localhost:3000/predict', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ features }),
      });

      const result = await response.json();
      const prediction = result.predictions[0][0];

      $('#prediction').text(`Predicted Probability: ${prediction}`);
    }
  </script>
</body>
</html>


const express = require('express');
const bodyParser = require('body-parser');
const tf = require('@tensorflow/tfjs-node');
const path = require('path');
const { createCanvas, loadImage } = require('canvas');

const app = express();
const port = 3000;

// Serve static files (HTML, CSS, etc.) from the 'public' directory
app.use(express.static('public'));
app.use(bodyParser.json());

// Load and serve the TensorFlow.js model
const modelPath = 'path/to/model/model.json';
const loadModel = async () => {
  return await tf.loadLayersModel(`file://${path.resolve(__dirname, modelPath)}`);
};

// Predict route
app.post('/predict', async (req, res) => {
  try {
    const features = req.body.features;
    const model = await loadModel();

    // Preprocess input features (add your preprocessing logic)
    const inputTensor = tf.tensor2d([features]);

    // Make predictions
    const predictions = model.predict(inputTensor);

    // Send the predictions as JSON response
    res.json({ predictions: predictions.arraySync() });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
